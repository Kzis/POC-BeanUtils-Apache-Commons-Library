//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.07.08 at 06:10:55 PM ICT 
//


package demo_bean_util.demo_request_ap;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for manifestRequirementType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="manifestRequirementType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     &lt;enumeration value="ManifestNotRequired"/>
 *     &lt;enumeration value="IncrementalManifest"/>
 *     &lt;enumeration value="FullManifest"/>
 *     &lt;enumeration value="ServiceCloseout"/>
 *     &lt;enumeration value="PostDepartureServiceCloseout"/>
 *     &lt;enumeration value="ServiceCancellation"/>
 *     &lt;enumeration value="ServiceSummary"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "manifestRequirementType", namespace = "http://sita.aero/iborders/APP/APPService/V1")
@XmlEnum
public enum ManifestRequirementType {

    @XmlEnumValue("ManifestNotRequired")
    MANIFEST_NOT_REQUIRED("ManifestNotRequired"),
    @XmlEnumValue("IncrementalManifest")
    INCREMENTAL_MANIFEST("IncrementalManifest"),
    @XmlEnumValue("FullManifest")
    FULL_MANIFEST("FullManifest"),
    @XmlEnumValue("ServiceCloseout")
    SERVICE_CLOSEOUT("ServiceCloseout"),
    @XmlEnumValue("PostDepartureServiceCloseout")
    POST_DEPARTURE_SERVICE_CLOSEOUT("PostDepartureServiceCloseout"),
    @XmlEnumValue("ServiceCancellation")
    SERVICE_CANCELLATION("ServiceCancellation"),
    @XmlEnumValue("ServiceSummary")
    SERVICE_SUMMARY("ServiceSummary");
    private final String value;

    ManifestRequirementType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ManifestRequirementType fromValue(String v) {
        for (ManifestRequirementType c: ManifestRequirementType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
